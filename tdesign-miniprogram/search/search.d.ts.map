{"version":3,"sources":["../src/search/search.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAe,MAAM,qBAAqB,CAAC;AAQlE,MAAM,CAAC,OAAO,OAAO,MAAO,SAAQ,cAAc;IAChD,eAAe,WAMb;IAEF,OAAO;;MAEL;IAEF,UAAU,iCAAS;IAEnB,SAAS;sBACO,MAAM,aAAa,MAAM;oBAG3B,MAAM,aAAa,OAAO;qBAGzB,MAAM,aAAa,OAAO;MAKvC;IAEF,IAAI;;;;;;;MAOF;IAEF;;;;;OAKG;IACH,mCAAmC,UAAS;IAE5C,QAAQ;IAOR,OAAO,CAAC,CAAC,KAAA;IAMT,OAAO;IASP,MAAM;IASN,OAAO;IAKP,SAAS,CAAC,CAAC,KAAA;IAKX,QAAQ;IAIR,yBAAyB;CAM1B","file":"search.d.ts","sourcesContent":["import { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-search`;\n\n@wxComponent()\nexport default class Search extends SuperComponent {\n  externalClasses = [\n    `${prefix}-class`,\n    `${prefix}-class-input`,\n    `${prefix}-class-cancel`,\n    `${prefix}-class-left`,\n    `${prefix}-class-right`,\n  ];\n\n  options = {\n    multipleSlots: true,\n  };\n\n  properties = props;\n\n  observers = {\n    keyword(this: Search, nextValue: string) {\n      this.setData({ 'localValue.keyword': nextValue });\n    },\n    focus(this: Search, nextValue: boolean) {\n      this.setData({ 'localValue.focus': nextValue });\n    },\n    center(this: Search, nextValue: boolean) {\n      if (!nextValue) {\n        this.ignoreFocusEvtAfterBlurInCenterMode = false;\n      }\n    },\n  };\n\n  data = {\n    classPrefix: name,\n    prefix,\n    localValue: {\n      keyword: '',\n      focus: false,\n    },\n  };\n\n  /**\n   * 场景：\n   * 1. center模式启用\n   * 2. 在点击激活input focus之后快速点击别的地方blur掉input\n   * 3. 如果没有这个变量拦截，onFocus会被短时间后被调用，猜测是input的onFocus触发是非同步的\n   */\n  ignoreFocusEvtAfterBlurInCenterMode = false;\n\n  attached() {\n    this.setData({\n      'localValue.keyword': this.properties.keyword,\n      'localValue.focus': this.properties.focus,\n    });\n  }\n\n  onInput(e) {\n    const { value } = e.detail;\n    this.setData({ 'localValue.keyword': value });\n    this.triggerEvent('change', { value });\n  }\n\n  onFocus() {\n    if (this.ignoreFocusEvtAfterBlurInCenterMode) {\n      this.ignoreFocusEvtAfterBlurInCenterMode = false;\n      return;\n    }\n    this.setData({ 'localValue.focus': true });\n    this.triggerEvent('focus');\n  }\n\n  onBlur() {\n    this.setData({ 'localValue.focus': false });\n    this.triggerEvent('blur');\n\n    if (this.properties.center) {\n      this.ignoreFocusEvtAfterBlurInCenterMode = true;\n    }\n  }\n\n  onClear() {\n    this.setData({ 'localValue.keyword': '' });\n    this.triggerEvent('clear', { value: '' });\n  }\n\n  onConfirm(e) {\n    const value = e.detail;\n    this.triggerEvent('submit', value);\n  }\n\n  onCancel() {\n    this.triggerEvent('cancel');\n  }\n\n  tapWhenCenterActiveHandle() {\n    if (this.properties.center) {\n      this.ignoreFocusEvtAfterBlurInCenterMode = false;\n      this.onFocus();\n    }\n  }\n}\n"]}