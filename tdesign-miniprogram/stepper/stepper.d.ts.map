{"version":3,"sources":["../src/stepper/stepper.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAe,MAAM,qBAAqB,CAAC;AAOlE,MAAM,CAAC,OAAO,OAAO,OAAQ,SAAQ,cAAc;IACjD,eAAe,WAKb;IAEF,OAAO;;MAEL;IAEF,UAAU,kCAAS;IAEnB,SAAS;;MAMP;IAEF,IAAI,EAAE;QACJ,YAAY,EAAE,MAAM,CAAC;QACrB,WAAW,EAAE,MAAM,CAAC;QACpB,MAAM,EAAE,MAAM,CAAC;KAChB,CAIC;IAEF,QAAQ;IAOR,UAAU,CAAC,IAAI,KAAA;IAef,MAAM,CAAC,KAAK,KAAA;IAMZ,QAAQ,CAAC,KAAK,KAAA;IAOd,UAAU;IASV,SAAS;IAST,WAAW,CAAC,CAAC,KAAA;IASb,WAAW,CAAC,CAAC,KAAA;CAGd","file":"stepper.d.ts","sourcesContent":["import { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\n\nconst { prefix } = config;\n\n@wxComponent()\nexport default class Stepper extends SuperComponent {\n  externalClasses = [\n    `${{ prefix }}-class`,\n    `${{ prefix }}-class-input`,\n    `${{ prefix }}-class-minus`,\n    `${{ prefix }}-class-plus`,\n  ];\n\n  options = {\n    addGlobalClass: true,\n  };\n\n  properties = props;\n\n  observers = {\n    value(v) {\n      this.setData({\n        currentValue: Number(v),\n      });\n    },\n  };\n\n  data: {\n    currentValue: Number;\n    classPrefix: String;\n    prefix: String;\n  } = {\n    currentValue: 0,\n    classPrefix: `${prefix}-stepper`,\n    prefix,\n  };\n\n  attached() {\n    const { value, min } = this.properties;\n    this.setData({\n      currentValue: value ? Number(value) : min,\n    });\n  }\n\n  isDisabled(type) {\n    const { min, max, disabled } = this.properties;\n    const { currentValue } = this.data as any;\n    if (disabled) {\n      return true;\n    }\n    if (type === 'minus' && currentValue <= min) {\n      return true;\n    }\n    if (type === 'plus' && currentValue >= max) {\n      return true;\n    }\n    return false;\n  }\n\n  format(value) {\n    const { min, max } = this.properties as any;\n    // 超过边界取边界值\n    return Math.max(Math.min(max, value, Number.MAX_SAFE_INTEGER), min, Number.MIN_SAFE_INTEGER);\n  }\n\n  setValue(value) {\n    this.setData({\n      currentValue: value,\n    });\n    this.triggerEvent('change', { value });\n  }\n\n  minusValue() {\n    if (this.isDisabled('minus')) {\n      this.triggerEvent('overlimit', { type: 'minus' });\n      return false;\n    }\n    const { currentValue, step } = this.data as any;\n    this.setValue(this.format(currentValue - step));\n  }\n\n  plusValue() {\n    if (this.isDisabled('plus')) {\n      this.triggerEvent('overlimit', { type: 'plus' });\n      return false;\n    }\n    const { currentValue, step } = this.data as any;\n    this.setValue(this.format(currentValue + step));\n  }\n\n  changeValue(e) {\n    const value =\n      String(e.detail.value)\n        .split('.')[0]\n        .replace(/[^-0-9]/g, '') || 0;\n    this.setValue(this.format(Number(value)));\n    this.triggerEvent('blur', { value });\n  }\n\n  blurHandler(e) {\n    this.changeValue(e);\n  }\n}\n"]}