{"version":3,"sources":["../src/radio/radio.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAe,MAAM,qBAAqB,CAAC;AAWlE,MAAM,CAAC,OAAO,OAAO,KAAM,SAAQ,cAAc;IAC/C,eAAe,WAAmG;IAElH,SAAS;;;;MAIP;IAEF,OAAO;;MAEL;IAEF,SAAS;;MAIP;IAEF,UAAU,gCAAS;IAEnB,IAAI;;;;;;;;MAQF;IAEF,OAAO;;;;6BAwCgB,OAAO;8BAKN,OAAO;gCAML,OAAO;MAK/B;CACH","file":"radio.d.ts","sourcesContent":["import config from '../common/config';\nimport { SuperComponent, wxComponent } from '../common/src/index';\nimport Props from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-radio`;\n\nconst iconDefault = {\n  'fill-circle': ['check-circle-filled', 'circle'],\n  'stroke-line': ['check', ''],\n};\n@wxComponent()\nexport default class Radio extends SuperComponent {\n  externalClasses = [`${prefix}-class`, `${prefix}-class-label`, `${prefix}-class-icon`, `${prefix}-class-content`];\n\n  relations = {\n    '../radio-group/radio-group': {\n      type: 'ancestor' as 'ancestor',\n    },\n  };\n\n  options = {\n    multipleSlots: true,\n  };\n\n  lifetimes = {\n    attached() {\n      this.handleInitStatus();\n    },\n  };\n\n  properties = Props;\n\n  data = {\n    prefix,\n    active: false,\n    classPrefix: name,\n    classBasePrefix: prefix,\n    customIcon: false,\n    optionLinked: false,\n    iconVal: [],\n  };\n\n  methods = {\n    onChange(e) {\n      if (this.data.disabled) return;\n      const { target } = e.currentTarget.dataset;\n      const { contentDisabled } = this.data;\n      if (target === 'text' && contentDisabled) {\n        return;\n      }\n      const { value, active, optionLinked } = this.data;\n      const [parent] = this.getRelationNodes('../radio-group/radio-group');\n      if (parent) {\n        parent.updateValue({ name: value });\n      } else {\n        if (optionLinked) {\n          this.triggerEvent('toggleGroupSelect', { name: value });\n          return;\n        }\n        this.triggerEvent('change', !active);\n        this.toggle();\n      }\n    },\n    handleInitStatus() {\n      const { icon } = this.data;\n      const isIdArr = Array.isArray(icon);\n      this.setData({\n        customIcon: isIdArr,\n        iconVal: !isIdArr ? iconDefault[icon] : this.data.icon,\n      });\n      if (!this.data.optionLinked) {\n        this.setData({\n          active: this.data.checked,\n        });\n      }\n    },\n    toggle() {\n      const { active } = this.data;\n      this.setData({\n        active: !active,\n      });\n    },\n    changeActive(active: boolean) {\n      this.setData({\n        active,\n      });\n    },\n    setDisabled(disabled: Boolean) {\n      this.setData({\n        disabled: this.data.disabled || disabled,\n      });\n    },\n    // 支持options\n    setOptionLinked(linked: Boolean) {\n      this.setData({\n        optionLinked: linked,\n      });\n    },\n  };\n}\n"]}