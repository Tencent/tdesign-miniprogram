{"version":3,"sources":["../src/transition/transition.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,QAAQ,CAAC;AAQ3C,oBAAY,eAAe,GAAG,iBAAiB,CAAC","file":"transition.d.ts","sourcesContent":["import { TdTransitionProps } from './type';\nimport TComponent from '../common/component';\nimport config from '../common/config';\nimport { classNames } from '../common/utils';\n\nconst { prefix } = config;\nconst name = `${prefix}-transition`;\n\nexport type TransitionProps = TdTransitionProps;\n\nTComponent({\n  options: {\n    styleIsolation: 'shared',\n  },\n  properties: {\n    visible: {\n      type: Boolean,\n      observer(current, prev) {\n        if (this.inited && current !== prev) {\n          if (current) {\n            this.enter();\n          } else {\n            this.leave();\n          }\n        }\n      },\n    },\n    destroyOnHide: Boolean,\n    appear: Boolean,\n    customClass: String,\n    name: {\n      type: String,\n      value: name,\n    },\n    durations: {\n      type: Number,\n      optionalTypes: [Array],\n    },\n  },\n  data: {\n    dataVisible: false,\n    transitionClass: '',\n    transitionDurations: 300,\n    className: '',\n  },\n  lifetimes: {\n    created() {\n      this.status = '';\n      this.transitionT = 0;\n    },\n    attached() {\n      this.setClass();\n      this.durations = this.getDurations();\n      if (this.data.appear && this.data.visible) {\n        this.enter();\n      } else if (this.data.visible) {\n        this.setData({\n          dataVisible: true,\n        });\n      }\n      this.inited = true;\n    },\n    detached() {\n      clearTimeout(this.transitionT);\n    },\n  },\n  observers: {\n    'customClass, transitionClass'() {\n      this.setClass();\n    },\n  },\n  methods: {\n    setClass() {\n      const { customClass, transitionClass } = this.data;\n      const className = classNames(customClass, transitionClass);\n      this.setData({\n        className,\n      });\n    },\n    getDurations() {\n      const { durations } = this.data;\n      if (Array.isArray(durations)) {\n        return durations.map((item) => Number(item));\n      }\n      return [Number(durations), Number(durations)];\n    },\n    enter() {\n      const { name } = this.data;\n      const [duration] = this.durations;\n      this.status = 'entering';\n      this.setData({\n        transitionClass: `${name}-enter ${name}-enter-active`,\n        dataVisible: true,\n      });\n      setTimeout(() => {\n        this.setData({\n          transitionClass: `${name}-enter  ${name}-enter-active ${name}-enter-to`,\n        });\n      }, 30);\n      if (typeof duration === 'number' && duration > 0) {\n        this.transitionT = setTimeout(this.entered.bind(this), duration + 30);\n      }\n    },\n    entered() {\n      this.customDuration = false;\n      clearTimeout(this.transitionT);\n      this.status = 'entered';\n      this.setData({\n        transitionClass: '',\n      });\n    },\n    leave() {\n      const { name } = this.data;\n      const [, duration] = this.durations;\n      this.status = 'leaving';\n      this.setData({\n        transitionClass: `${name}-leave  ${name}-leave-active`,\n      });\n      setTimeout(() => {\n        this.setData({\n          transitionClass: [`${name}-leave ${name}-leave-active ${name}-leave-to`],\n        });\n      }, 30);\n      if (typeof duration === 'number' && duration > 0) {\n        this.customDuration = true;\n        this.transitionT = setTimeout(this.leaved.bind(this), duration + 30);\n      }\n    },\n    leaved() {\n      this.customDuration = false;\n      clearTimeout(this.transitionT);\n      this.status = 'leaved';\n      this.setData({\n        transitionClass: '',\n        dataVisible: false,\n      });\n    },\n    onTransitionEnd() {\n      if (this.customDuration) {\n        return;\n      }\n      clearTimeout(this.transitionT);\n      if (this.status === 'entering' && this.data.visible) {\n        this.entered();\n      } else if (this.status === 'leaving' && !this.data.visible) {\n        this.leaved();\n      }\n    },\n  },\n});\n"]}