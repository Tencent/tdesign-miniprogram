{"version":3,"sources":["../src/dropdown-menu/dropdown-menu.ts"],"names":[],"mappings":"","file":"dropdown-menu.d.ts","sourcesContent":["import TComponent from '../common/component';\nimport config from '../common/config';\n\nconst { prefix } = config;\nconst name = `${prefix}-dropdown-menu`;\n\nTComponent({\n  properties: {\n    overlay: {\n      type: Boolean,\n      value: true,\n    },\n    duration: {\n      type: Number,\n      value: 200,\n    },\n    closeOnClickOverlay: {\n      type: Boolean,\n      value: true,\n    },\n  },\n  data: {\n    classBasePrefix: prefix,\n    classPrefix: name,\n    nodes: null,\n    menus: null,\n    activeIdx: -1,\n    bottom: 0,\n  },\n  relations: {\n    './dropdown-item': {\n      type: 'child',\n    },\n  },\n  methods: {\n    _getAllItems() {\n      const nodes = this.getRelationNodes('./dropdown-item');\n      const menus = nodes.map((a) => {\n        const { title, disabled } = a.data;\n        return { title, disabled };\n      });\n      this.setData({\n        nodes,\n        menus,\n      });\n    },\n    _toggleDropdown(e) {\n      const idx = e.target.dataset.index;\n      const { activeIdx } = this.data;\n      if (activeIdx !== -1) {\n        this.triggerEvent('close');\n        this.data.nodes[activeIdx].setData({\n          show: false,\n        });\n        this.triggerEvent('closed');\n      }\n      if (activeIdx === idx) {\n        this.setData({\n          activeIdx: -1,\n        });\n      } else {\n        this.triggerEvent('open');\n        this.setData({\n          activeIdx: idx,\n        });\n        this.data.nodes[idx].setData({\n          show: true,\n        });\n        this.triggerEvent('opened');\n      }\n    },\n  },\n  ready() {\n    this._getAllItems();\n  },\n});\n"]}