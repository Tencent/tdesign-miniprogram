{"version":3,"sources":["../src/date-time-picker/date-time-picker.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,KAAK,EAAE,MAAM,OAAO,CAAC;AACnC,OAAO,EAAE,cAAc,EAAe,MAAM,qBAAqB,CAAC;AAMlE;;;;;;;;;;;;;;;GAeG;AAEH,aAAK,QAAQ;IACX,IAAI,SAAS;IACb,KAAK,UAAU;IACf,IAAI,SAAS;IACb,IAAI,SAAS;IACb,MAAM,WAAW;IAEjB,aAAa,cAAc;IAC3B,eAAe,gBAAgB;IAC/B,cAAc,eAAe;IAC7B,gBAAgB,iBAAiB;IACjC,cAAc,eAAe;IAC7B,aAAa,cAAc;IAC3B,eAAe,gBAAgB;IAE/B,SAAS,cAAc;IACvB,WAAW,gBAAgB;CAC5B;AACD,UAAU,eAAe;IACvB,IAAI,EAAE,MAAM,CAAC;IACb,KAAK,EAAE,MAAM,GAAG,MAAM,CAAC;IACvB,KAAK,EAAE,MAAM,GAAG,MAAM,CAAC;CACxB;AAMD,MAAM,CAAC,OAAO,OAAO,cAAe,SAAQ,cAAc;IACxD,UAAU,yCAAS;IAEnB,eAAe,WAAqE;IAEpF,SAAS;;;MAYP;IAEF,IAAI;;;;;;;;;;;;;;;;MAMF;IAEF,OAAO;;2CAiByB,QAAQ;sBAIxB,KAAK;sBAML,KAAK;sBAML,MAAM;sBAIN,MAAM;uBAIL,MAAM;uBAIN,MAAM;qBAIR,MAAM;qBAIN,MAAM;sBAIL,MAAM;sBAIN,MAAM;wBAIJ,MAAM;wBAIN,MAAM;mBAIX,KAAK;6BAKA,KAAK;sBAOP,KAAK,QAAQ,MAAM,GAAG,KAAK;uBAS1B,KAAK,SAAS,MAAM,GAAG,KAAK;uBAQ5B,MAAM,eAAe,EAAE,CAAC;2BAmKpB,cAAc;;;;2BAOd,MAAM,EAAE;0BAyDT,MAAM,QAAQ,QAAQ,GAAG,KAAK;0BA0B9B,6BAA6B;;;MA2C/C;CACH","file":"date-time-picker.d.ts","sourcesContent":["import dayjs from 'dayjs';\nimport type { Dayjs } from 'dayjs';\nimport { SuperComponent, wxComponent } from '../common/src/index';\nimport defaultLocale from './locale/zh';\n\nimport props from './props';\nimport { DisableDateObj } from './type';\n\n/**\n *\nmode 数组 [日期选择器的最后一个时间点，时间选择器的最后一个时间点]\n[year] ------ 年\n[month] ------ 年/月\n[date] ------ 年/月/日\n[hour] ------ 年/月/日/小时\n[minute] ------ 年/月/日/小时/分钟\n\n[year, hour] ------ 年/小时\n[year, minute] ------ 年/小时/分钟\n[month, hour] ------ 年/月/小时\n[month, minute] ------ 年/月/小时/分钟\n[date, hour] ------ 年/月/日/小时\n[date, minute] ------ 年/月/日/小时/分钟\n */\n\nenum ModeType {\n  YEAR = 'year', // 年\n  MONTH = 'month', // 年/月\n  DATE = 'date', // 年/月/日\n  HOUR = 'hour', //  年/月/日/小时\n  MINUTE = 'minute', // 年/月/日/小时/分钟\n\n  YEAR_ADD_HOUR = 'year+hour', // 年/小时\n  YEAR_ADD_MINUTE = 'year+minute', // 年/小时/分钟\n  MONTH_ADD_HOUR = 'month+hour', // 年/月/小时\n  MONTH_ADD_MINUTE = 'month+minute', // 年/月/小时/分钟\n  MONTH_ADD_DATE = 'month+date', // 月/日\n  DATE_ADD_HOUR = 'date+hour', // 年/月/日/小时\n  DATE_ADD_MINUTE = 'date+minute', // 年/月/日/小时/分钟\n\n  NULL_HOUR = 'null+hour', // 小时\n  NULL_MINUTE = 'null+minute', // 小时 + 分钟\n}\ninterface ColumnItemValue {\n  type: string;\n  value: string | number;\n  label: string | number;\n}\n\nconst DEFAULT_MIN_DATE: Dayjs = dayjs('2000-01-01 00:00:00');\nconst DEFAULT_MAX_DATE: Dayjs = dayjs('2030-12-31 23:59:59');\n\n@wxComponent()\nexport default class DateTimePicker extends SuperComponent {\n  properties = props;\n\n  externalClasses = ['t-class', 't-class-confirm', 't-class-cancel', 't-class-title'];\n\n  observers = {\n    // value 变化需要同步 内部 date 实现受控属性\n    value() {\n      this.updateColumns();\n    },\n    mode(m) {\n      const modeName = this.getModeNameByPropsMode(m);\n      this.setData({\n        modeName,\n      });\n      this.updateColumns();\n    },\n  };\n\n  data = {\n    date: null,\n    columns: [],\n    columnsValue: [],\n    modeName: 'date',\n    locale: defaultLocale,\n  };\n\n  methods = {\n    updateColumns() {\n      const { value } = this.properties;\n\n      const parseDate = dayjs(value || DEFAULT_MIN_DATE);\n\n      this.setData({\n        date: parseDate,\n      });\n\n      const { columns, columnsValue } = this.getValueCols();\n      this.setData({\n        columns,\n        columnsValue,\n      });\n    },\n\n    getModeNameByPropsMode(mode): ModeType {\n      return mode.join('+');\n    },\n\n    getMinDate(): Dayjs {\n      const { disableDate } = this.properties;\n      const startDate = (disableDate as DisableDateObj)?.before;\n      return startDate ? dayjs(startDate) : DEFAULT_MIN_DATE;\n    },\n\n    getMaxDate(): Dayjs {\n      const { disableDate } = this.properties;\n      const endDate = (disableDate as DisableDateObj)?.after;\n      return endDate ? dayjs(endDate) : DEFAULT_MAX_DATE;\n    },\n\n    getMinYear(): number {\n      return this.getMinDate().year();\n    },\n\n    getMaxYear(): number {\n      return this.getMaxDate().year();\n    },\n\n    getMinMonth(): number {\n      return this.getMinDate().month();\n    },\n\n    getMaxMonth(): number {\n      return this.getMaxDate().month();\n    },\n\n    getMinDay(): number {\n      return this.getMinDate().date();\n    },\n\n    getMaxDay(): number {\n      return this.getMaxDate().date();\n    },\n\n    getMinHour(): number {\n      return this.getMinDate().hour();\n    },\n\n    getMaxHour(): number {\n      return this.getMaxDate().hour();\n    },\n\n    getMinMinute(): number {\n      return this.getMinDate().minute();\n    },\n\n    getMaxMinute(): number {\n      return this.getMaxDate().minute();\n    },\n\n    getDate(): Dayjs {\n      return this.clipDate(this.data?.date || DEFAULT_MIN_DATE);\n    },\n\n    // 数据裁减 确保数据不越界\n    clipDate(date): Dayjs {\n      const minDate: Dayjs = this.getMinDate();\n      const maxDate: Dayjs = this.getMaxDate();\n      return dayjs(Math.min(Math.max(minDate.valueOf(), date.valueOf()), maxDate.valueOf()));\n    },\n\n    // 年变化时 需要修正 日数据  例如 2 月的 28 | 29\n    setYear(date: Dayjs, year: number): Dayjs {\n      const beforeMonthDays = date.date();\n      const afterMonthDays = date.year(year).daysInMonth();\n\n      const tempDate = date.date(Math.min(beforeMonthDays.valueOf(), afterMonthDays.valueOf()));\n      return tempDate.year(year);\n    },\n\n    // 月变化时 需要修正 日数据边界\n    setMonth(date: Dayjs, month: number): Dayjs {\n      const beforeMonthDays = date.date();\n      const afterMonthDays = date.month(month).daysInMonth();\n\n      const tempDate = date.date(Math.min(beforeMonthDays.valueOf(), afterMonthDays.valueOf()));\n      return tempDate.month(month);\n    },\n\n    getDateData(): Array<ColumnItemValue[]> {\n      const { modeName, locale } = this.data;\n      const date: Dayjs = this.getDate();\n\n      const selYear = date.year();\n      const selMonth = date.month();\n      const selDate = date.date();\n      const selHour = date.hour();\n\n      const minDateYear = this.getMinYear();\n      const maxDateYear = this.getMaxYear();\n      const minDateMonth = this.getMinMonth();\n      const maxDateMonth = this.getMaxMonth();\n      const minDateDay = this.getMinDay();\n      const maxDateDay = this.getMaxDay();\n\n      const minDateHour = this.getMinHour();\n      const maxDateHour = this.getMaxHour();\n      const minDateMinute = this.getMinMinute();\n      const maxDateMinute = this.getMaxMinute();\n\n      // 年处理\n      const years: ColumnItemValue[] = [];\n      for (let i = minDateYear; i <= maxDateYear; i += 1) {\n        years.push({\n          type: ModeType.YEAR,\n          value: `${i}`,\n          label: `${i + locale.year}`,\n        });\n      }\n      if (modeName === ModeType.YEAR) {\n        return [years];\n      }\n\n      // 月处理\n      const months: ColumnItemValue[] = [];\n      let minMonth = 0;\n      let maxMonth = 11;\n      if (minDateYear === selYear) {\n        minMonth = minDateMonth;\n      }\n      if (maxDateYear === selYear) {\n        maxMonth = maxDateMonth;\n      }\n\n      for (let i = minMonth; i <= maxMonth; i += 1) {\n        months.push({\n          type: ModeType.MONTH,\n          value: `${i}`,\n          label: `${i + 1 + locale.month}`,\n        });\n      }\n      if (modeName === ModeType.MONTH) {\n        return [years, months];\n      }\n\n      // 日处理\n      const days: ColumnItemValue[] = [];\n      let minDay = 1;\n      let maxDay = date.daysInMonth();\n      if (minDateYear === selYear && minDateMonth === selMonth) {\n        minDay = minDateDay;\n      }\n      if (maxDateYear === selYear && maxDateMonth === selMonth) {\n        maxDay = maxDateDay;\n      }\n      for (let i = minDay; i <= maxDay; i += 1) {\n        days.push({\n          type: ModeType.DATE,\n          value: `${i}`,\n          label: `${i + locale.day}`,\n        });\n      }\n      if (modeName === ModeType.DATE) {\n        return [years, months, days];\n      }\n\n      // 小时\n      const hours: ColumnItemValue[] = [];\n      let minHour = 0;\n      let maxHour = 23;\n      if (minDateYear === selYear && minDateMonth === selMonth && minDateDay === selDate) {\n        minHour = minDateHour;\n      }\n      if (maxDateYear === selYear && maxDateMonth === selMonth && maxDateDay === selDate) {\n        maxHour = maxDateHour;\n      }\n      for (let i = minHour; i <= maxHour; i += 1) {\n        hours.push({\n          type: ModeType.HOUR,\n          value: `${i}`,\n          label: `${i + locale.hour}`,\n        });\n      }\n\n      // 分钟\n      const minutes: ColumnItemValue[] = [];\n      let minMinute = 0;\n      let maxMinute = 59;\n\n      if (\n        minDateYear === selYear &&\n        minDateMonth === selMonth &&\n        minDateDay === selDate &&\n        minHour === selHour\n      ) {\n        minMinute = minDateMinute;\n      }\n\n      if (\n        maxDateYear === selYear &&\n        maxDateMonth === selMonth &&\n        maxDateDay === selDate &&\n        maxHour === selHour\n      ) {\n        maxMinute = maxDateMinute;\n      }\n\n      for (let i = minMinute; i <= maxMinute; i += 1) {\n        minutes.push({\n          type: ModeType.MINUTE,\n          value: `${i}`,\n          label: `${i + locale.minute}`,\n        });\n      }\n\n      if (modeName === ModeType.MINUTE || modeName === ModeType.DATE_ADD_MINUTE) {\n        return [years, months, days, hours, minutes];\n      }\n\n      if (modeName === ModeType.YEAR_ADD_HOUR) {\n        return [years, hours];\n      }\n\n      if (modeName === ModeType.YEAR_ADD_MINUTE) {\n        return [years, hours, minutes];\n      }\n\n      if (modeName === ModeType.MONTH_ADD_HOUR) {\n        return [years, months, hours];\n      }\n\n      if (modeName === ModeType.MONTH_ADD_MINUTE) {\n        return [years, months, hours, minutes];\n      }\n\n      if (modeName === ModeType.DATE_ADD_HOUR) {\n        return [years, months, days, hours];\n      }\n\n      if (modeName === ModeType.NULL_HOUR) {\n        return [hours];\n      }\n\n      if (modeName === ModeType.NULL_MINUTE) {\n        return [hours, minutes];\n      }\n\n      if (modeName === ModeType.MONTH_ADD_DATE) {\n        return [months, days];\n      }\n    },\n\n    getValueCols(this: DateTimePicker) {\n      return {\n        columns: this.getDateData(),\n        columnsValue: this.getColumnsValue(),\n      };\n    },\n\n    getColumnsValue(): string[] {\n      const { modeName } = this.data;\n      const date: Dayjs = this.getDate();\n\n      const mode2Value = {\n        [`${ModeType.YEAR}`]: [`${date.year()}`],\n        [`${ModeType.MONTH}`]: [`${date.year()}`, `${date.month()}`],\n        [`${ModeType.DATE}`]: [`${date.year()}`, `${date.month()}`, `${date.date()}`],\n        [`${ModeType.HOUR}`]: [\n          `${date.year()}`,\n          `${date.month()}`,\n          `${date.date()}`,\n          `${date.hour()}`,\n        ],\n        [`${ModeType.MINUTE}`]: [\n          `${date.year()}`,\n          `${date.month()}`,\n          `${date.date()}`,\n          `${date.hour()}`,\n          `${date.minute()}`,\n        ],\n\n        [`${ModeType.YEAR_ADD_HOUR}`]: [`${date.year()}`, `${date.hour()}`],\n        [`${ModeType.YEAR_ADD_MINUTE}`]: [`${date.year()}`, `${date.hour()}`, `${date.minute()}`],\n        [`${ModeType.MONTH_ADD_HOUR}`]: [`${date.year()}`, `${date.month()}`, `${date.hour()}`],\n        [`${ModeType.MONTH_ADD_MINUTE}`]: [\n          `${date.year()}`,\n          `${date.month()}`,\n          `${date.hour()}`,\n          `${date.minute()}`,\n        ],\n        [`${ModeType.DATE_ADD_HOUR}`]: [\n          `${date.year()}`,\n          `${date.month()}`,\n          `${date.date()}`,\n          `${date.hour()}`,\n        ],\n        [`${ModeType.DATE_ADD_MINUTE}`]: [\n          `${date.year()}`,\n          `${date.month()}`,\n          `${date.date()}`,\n          `${date.hour()}`,\n          `${date.minute()}`,\n        ],\n\n        [`${ModeType.NULL_HOUR}`]: [`${date.hour()}`],\n        [`${ModeType.NULL_MINUTE}`]: [`${date.hour()}`, `${date.minute()}`],\n        [`${ModeType.MONTH_ADD_DATE}`]: [`${date.month()}`, `${date.date()}`],\n      };\n\n      if (mode2Value[modeName] === undefined) {\n        throw new Error('mode 输入项有误');\n      }\n\n      return mode2Value[modeName];\n    },\n\n    getNewDate(value: number, type: ModeType): Dayjs {\n      let newValue: Dayjs = this.getDate();\n\n      switch (type) {\n        case ModeType.YEAR:\n          newValue = this.setYear(newValue, value);\n          break;\n        case ModeType.MONTH:\n          newValue = this.setMonth(newValue, value);\n          break;\n        case ModeType.DATE:\n          newValue = newValue.date(value);\n          break;\n        case ModeType.HOUR:\n          newValue = newValue.hour(value);\n          break;\n        case ModeType.MINUTE:\n          newValue = newValue.minute(value);\n          break;\n        default:\n          break;\n      }\n\n      return this.clipDate(newValue);\n    },\n\n    onColumnChange(e: WechatMiniprogram.CustomEvent) {\n      const { value, column } = e?.detail;\n\n      const newValue = this.getNewDate(parseInt(value?.value, 10), value?.type);\n\n      this.setData({\n        date: newValue,\n      });\n\n      const { columns, columnsValue } = this.getValueCols();\n\n      this.setData({\n        columns,\n        columnsValue,\n      });\n\n      this.triggerEvent('column-change', { column, value });\n    },\n\n    onConfirm() {\n      const { format } = this.properties;\n      const date = this.getDate();\n\n      this.triggerEvent('confirm', { value: date, formatValue: date.format(format) });\n    },\n\n    onCancel() {\n      const { value } = this.properties;\n      const parseDate = dayjs(value || DEFAULT_MIN_DATE);\n\n      this.setData({\n        date: parseDate,\n      });\n\n      const { columns, columnsValue } = this.getValueCols();\n\n      this.setData({\n        columns,\n        columnsValue,\n      });\n\n      this.triggerEvent('cancel');\n    },\n  };\n}\n"]}