{"version":3,"sources":["../src/drawer/drawer.ts"],"names":[],"mappings":"","file":"drawer.d.ts","sourcesContent":["import TComponent from '../common/component';\n\nconst sizeKeywordMap = {\n  small: '30%',\n  middle: '50%',\n  large: '70%',\n};\nTComponent({\n  properties: {\n    visible: Boolean,\n    closeBtn: {\n      type: Boolean,\n      value: true,\n    },\n    size: {\n      type: String, // large/middle/small/300px/500px/80%/50%/120/150\n      optionalTypes: [Number],\n      value: 'large',\n    },\n    position: {\n      type: String,\n      value: 'left', // top | bottom | left | right\n    },\n    sidebar: {\n      type: Array,\n      value: [],\n    },\n  },\n  data: {\n    drawerSize: '',\n  },\n  observers: {\n    size(val) {\n      this._calcDrawerSize(val);\n    },\n  },\n  attached() {},\n  methods: {\n    /**\n     * @description size的值可传large/middle/small/300px/500px/80%/50%/120/150, 将传入的size根据不同模式做相应转换\n     * @param size\n     */\n    _calcDrawerSize(size) {\n      let drawerSize = '';\n      if (typeof size === 'number') {\n        drawerSize = `${size}px;`;\n      }\n      if (typeof size === 'string') {\n        const pxReg = /[0-9]+px$/g;\n        const percentReg = /[0-9]+%$/g;\n        const isVerticle =\n          this.properties.position === 'left' || this.properties.position === 'right';\n\n        if (pxReg.test(size)) {\n          drawerSize = size;\n        } else if (percentReg.test(size)) {\n          const val = size.replace('%', '');\n          drawerSize = isVerticle\n            ? `calc(100vw * ${Number(val) / 100})`\n            : `calc(100vh * ${Number(val) / 100})`;\n        } else {\n          const currentVal = sizeKeywordMap[size] || '70%';\n          const val = currentVal.replace('%', '');\n          drawerSize = isVerticle\n            ? `calc(100vw * ${Number(val) / 100})`\n            : `calc(100vh * ${Number(val) / 100})`;\n        }\n      }\n      this.setData({\n        drawerSize,\n      });\n    },\n    onClose(e) {\n      this.triggerEvent('close', e);\n      this.setData({\n        visible: false,\n      });\n    },\n    onClickOverlay(e) {\n      this.triggerEvent('clickOverlay', e);\n      this.setData({\n        visible: false,\n      });\n    },\n  },\n});\n"]}