{"version":3,"sources":["../src/checkbox/checkbox.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAe,MAAM,qBAAqB,CAAC;AAOlE,MAAM,CAAC,OAAO,OAAO,QAAS,SAAQ,cAAc;IAClD,eAAe,WAAmE;IAElF,SAAS;;;;MAIP;IAEF,OAAO;;MAEL;IAEF,UAAU,mCAAS;IAGnB,IAAI;;;;;;MAMF;IAEF,SAAS;;MAIP;IAGF,OAAO;;;;8BAwDiB,OAAO;6BAKR,OAAO;yCAMK,OAAO;gCAMhB,OAAO;MAK/B;CACH","file":"checkbox.d.ts","sourcesContent":["import { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport Props from './props';\n\nconst { prefix } = config;\nconst currentComponent = `${prefix}-checkbox`;\n@wxComponent()\nexport default class CheckBox extends SuperComponent {\n  externalClasses = ['t-class', 't-class-label', 't-class-icon', 't-class-content'];\n\n  relations = {\n    '../checkbox-group/checkbox-group': {\n      type: 'ancestor' as 'ancestor',\n    },\n  };\n\n  options = {\n    multipleSlots: true,\n  };\n\n  properties = Props;\n\n  // 组件的内部数据\n  data = {\n    classPrefix: currentComponent,\n    classBasePrefix: prefix,\n    active: false,\n    halfChecked: false,\n    optionLinked: false,\n  };\n\n  lifetimes = {\n    attached() {\n      this.initStatus();\n    },\n  };\n\n  /* Methods */\n  methods = {\n    onChange(e) {\n      const { disabled, readonly } = this.data;\n      if (disabled || readonly) return;\n      const { target } = e.currentTarget.dataset;\n      const { contentDisabled } = this.data;\n      if (target === 'text' && contentDisabled) {\n        return;\n      }\n      const { value, active, checkAll, optionLinked } = this.data;\n      const item = { name: value, checked: !active, checkAll };\n      const [parent] = this.getRelationNodes('../checkbox-group/checkbox-group');\n      if (parent) {\n        if (checkAll || optionLinked) {\n          parent.handleCheckAll({\n            type: 'slot',\n            checked: !active,\n            option: !checkAll,\n            name: value,\n          });\n        } else {\n          parent.updateValue(item);\n        }\n      } else if (checkAll || optionLinked) {\n        this.triggerEvent('toggleAll', {\n          type: 'not-slot',\n          checked: !active,\n          option: !checkAll,\n          name: value,\n        });\n      } else {\n        this.triggerEvent('change', !active);\n        this.toggle();\n      }\n    },\n    initStatus() {\n      if (!this.data.optionLinked) {\n        if (this.data.indeterminate) {\n          this.setData({\n            active: true,\n            halfChecked: true,\n          });\n        } else {\n          this.setData({\n            active: this.data.checked,\n            halfChecked: this.data.indeterminate,\n          });\n        }\n      }\n    },\n    toggle() {\n      const { active } = this.data;\n      this.setData({\n        active: !active,\n      });\n    },\n    setDisabled(disabled: Boolean) {\n      this.setData({\n        disabled: this.data.disabled || disabled,\n      });\n    },\n    changeActive(active: boolean) {\n      this.setData({\n        active,\n      });\n    },\n    // 半选\n    changeCheckAllHalfStatus(active: boolean) {\n      this.setData({\n        halfChecked: active,\n      });\n    },\n    // group option\n    setOptionLinked(linked: Boolean) {\n      this.setData({\n        optionLinked: linked,\n      });\n    },\n  };\n}\n"]}