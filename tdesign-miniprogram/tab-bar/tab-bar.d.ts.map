{"version":3,"sources":["../src/tab-bar/tab-bar.ts"],"names":[],"mappings":"AAAA,OAAO,EAAe,cAAc,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAQpF,MAAM,CAAC,OAAO,OAAO,MAAO,SAAQ,cAAc;IAChD,SAAS,EAAE,gBAAgB,CAIzB;IAEF,eAAe,WAAe;IAE9B,IAAI;;;MAGF;IAEF,UAAU,iCAAS;IAEnB,SAAS;;MAIP;IAEF;;OAEG;IACH,KAAK;IAIL,OAAO;;;;;QA4CL;;WAEG;;MASH;CACH","file":"tab-bar.d.ts","sourcesContent":["import { wxComponent, SuperComponent, RelationsOptions } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\n\nconst { prefix } = config;\nconst classPrefix = `${prefix}-tab-bar`;\n\n@wxComponent()\nexport default class Tabbar extends SuperComponent {\n  relations: RelationsOptions = {\n    './tab-bar-item': {\n      type: 'descendant',\n    },\n  };\n\n  externalClasses = ['t-class'];\n\n  data = {\n    classPrefix,\n    defaultNameIndex: -1,\n  };\n\n  properties = props;\n\n  observers = {\n    value() {\n      this.updateChildren();\n    },\n  };\n\n  /**\n   * value设置为多层级标签，需要展开\n   */\n  ready() {\n    this.showChildren();\n  }\n\n  methods = {\n    showChildren() {\n      const items = this.getRelationNodes('./tab-bar-item');\n      const len = items.length;\n      const { value } = this.data;\n      if (len > 0) {\n        items.forEach((item) => {\n          if (item.properties.currentName === value) {\n            item.showSpread();\n          }\n        });\n      }\n    },\n    updateChildren() {\n      const items = this.getRelationNodes('./tab-bar-item');\n      const len = items.length;\n      const { value } = this.data;\n\n      if (len > 0) {\n        items.forEach((item) => {\n          item.checkActive(value);\n        });\n      }\n    },\n    updateValue(value) {\n      this.setData(\n        {\n          value,\n        },\n        () => {\n          this.updateChildren();\n        },\n      );\n      this.triggerEvent('change', value);\n    },\n    changeOtherSpread(value) {\n      const items = this.getRelationNodes('./tab-bar-item');\n\n      items.forEach((item) => {\n        if (item.properties.currentName !== value) {\n          item.closeSpread();\n        }\n      });\n    },\n    /**\n     * 对于没有 name 的 item 生成一个 name\n     */\n    initName() {\n      const nameIndex = this.data.defaultNameIndex + 1;\n\n      this.setData({\n        defaultNameIndex: nameIndex,\n      });\n      return nameIndex;\n    },\n  };\n}\n"]}