{"version":3,"sources":["../src/tab-bar/tab-bar-item.ts"],"names":[],"mappings":"AAAA,OAAO,EAAe,cAAc,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAQpF,MAAM,CAAC,OAAO,OAAO,UAAW,SAAQ,cAAc;IACpD,SAAS,EAAE,gBAAgB,CAczB;IAEF,IAAI;;;;;;;;;;MAUF;IAEF,UAAU,qCAAS;IAEnB,SAAS;yBACU,OAAO,MAAM,EAAE,GAAG,CAAC,EAAE;MAKtC;IAEF,OAAO;;;;;;MA6CL;CACH","file":"tab-bar-item.d.ts","sourcesContent":["import { wxComponent, SuperComponent, RelationsOptions } from '../common/src/index';\nimport config from '../common/config';\nimport props from './tab-bar-item-props';\n\nconst { prefix } = config;\nconst classPrefix = `${prefix}-tab-bar-item`;\n\n@wxComponent()\nexport default class TabbarItem extends SuperComponent {\n  relations: RelationsOptions = {\n    './tab-bar': {\n      type: 'ancestor',\n      linked(parent) {\n        const [activeColor, color] = parent.data.color;\n        this.setData({\n          parent,\n          color,\n          activeColor,\n          currentName: this.properties.value ? this.properties.value : parent.initName(),\n        });\n        parent.updateChildren();\n      },\n    },\n  };\n\n  data = {\n    prefix,\n    classPrefix,\n    isSpread: false,\n    isChecked: false,\n    parent: null,\n    hasChildren: false,\n    currentName: '',\n    color: '',\n    activeColor: '',\n  };\n\n  properties = props;\n\n  observers = {\n    subTabBar(value: Record<string, any>[]) {\n      this.setData({\n        hasChildren: value.length > 0,\n      });\n    },\n  };\n\n  methods = {\n    showSpread() {\n      this.setData({\n        isSpread: true,\n      });\n    },\n    toggle() {\n      const { parent, currentName, hasChildren, isSpread } = this.data;\n\n      if (hasChildren) {\n        this.setData({\n          isSpread: !isSpread,\n        });\n      }\n      parent.updateValue(currentName);\n      parent.changeOtherSpread(currentName);\n    },\n    selectChild(event) {\n      const { parent, currentName } = this.data;\n      const childName = event.target.dataset.name;\n\n      if (!(Array.isArray(parent.value) && parent.value[1] === childName)) {\n        parent.updateValue([currentName, childName]);\n      }\n      this.setData({\n        isSpread: false,\n      });\n    },\n    checkActive(value) {\n      const { currentName, hasChildren } = this.data;\n      const isChecked = currentName === value;\n\n      if (hasChildren && Array.isArray(value)) {\n        return value.indexOf(currentName) > -1;\n      }\n\n      this.setData({\n        isChecked,\n      });\n    },\n    closeSpread() {\n      this.setData({\n        isSpread: false,\n      });\n    },\n  };\n}\n"]}