{"version":3,"sources":["../src/loading/loading.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAClE,OAAO,MAAM,MAAM,kBAAkB,CAAC;AACtC,OAAO,KAAK,MAAM,SAAS,CAAC;AAE5B,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;AAC1B,MAAM,IAAI,GAAG,GAAG,MAAM,UAAU,CAAC;AAEjC,IAAqB,OAAO,GAA5B,MAAqB,OAAQ,SAAQ,cAAc;IAAnD;;QACE,oBAAe,GAAG,CAAC,GAAG,MAAM,QAAQ,EAAE,GAAG,MAAM,aAAa,EAAE,GAAG,MAAM,kBAAkB,CAAC,CAAC;QAE3F,SAAI,GAAG;YACL,MAAM;YACN,WAAW,EAAE,IAAI;YACjB,IAAI,EAAE,KAAK;SACZ,CAAC;QAEF,YAAO,GAAG;YACR,aAAa,EAAE,IAAI;SACpB,CAAC;QAEF,eAAU,GAAG,KAAK,CAAC;QAEnB,UAAK,GAAG,IAAI,CAAC;QAEb,cAAS,GAAG;YACV,OAAO,CAAO,GAAG;gBACf,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;gBAClC,IAAI,IAAI,CAAC,KAAK,EAAE;oBACd,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAC1B;gBACD,IAAI,GAAG,EAAE;oBACP,IAAI,KAAK,EAAE;wBACT,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,GAAG,EAAE;4BAC3B,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;4BAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;wBACpB,CAAC,EAAE,KAAK,CAAC,CAAC;qBACX;yBAAM;wBACL,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;qBAC7B;iBACF;qBAAM;oBACL,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;iBAC7B;YACH,CAAC;SACF,CAAC;QAEF,cAAS,GAAG;YACV,QAAQ;gBACN,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3B,CAAC;SACF,CAAC;IAKJ,CAAC;IAHC,WAAW;QACT,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC;CACF,CAAA;AA/CoB,OAAO;IAD3B,WAAW,EAAE;GACO,OAAO,CA+C3B;eA/CoB,OAAO","file":"loading.js","sourcesContent":["import { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-loading`;\n@wxComponent()\nexport default class Loading extends SuperComponent {\n  externalClasses = [`${prefix}-class`, `${prefix}-class-text`, `${prefix}-class-indicator`];\n\n  data = {\n    prefix,\n    classPrefix: name,\n    show: false,\n  };\n\n  options = {\n    multipleSlots: true,\n  };\n\n  properties = props;\n\n  timer = null;\n\n  observers = {\n    loading(this, cur) {\n      const { delay } = this.properties;\n      if (this.timer) {\n        clearTimeout(this.timer);\n      }\n      if (cur) {\n        if (delay) {\n          this.timer = setTimeout(() => {\n            this.setData({ show: cur });\n            this.timer = null;\n          }, delay);\n        } else {\n          this.setData({ show: cur });\n        }\n      } else {\n        this.setData({ show: cur });\n      }\n    },\n  };\n\n  lifetimes = {\n    detached() {\n      clearTimeout(this.timer);\n    },\n  };\n\n  refreshPage() {\n    this.triggerEvent('reload');\n  }\n}\n"]}