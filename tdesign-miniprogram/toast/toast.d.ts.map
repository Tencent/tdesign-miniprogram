{"version":3,"sources":["../src/toast/toast.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAe,MAAM,qBAAqB,CAAC;AAClE,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAC;AAQtC,MAAM,CAAC,OAAO,OAAO,KAAM,SAAQ,cAAc;IAC/C,eAAe,WAAe;IAE9B,OAAO;;MAEL;IAEF,SAAS,EAAE,MAAM,GAAG,IAAI,CAAQ;IAEhC,WAAW,EAAE,MAAM,GAAG,IAAI,CAAQ;IAElC,WAAW,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAIjC;IAEF,IAAI;;;;;MAKF;IAEF,UAAU,eAAS;IAEnB,IAAI,CAAC,OAAO,EAAE,YAAY;IAqB1B,KAAK;IASL,QAAQ;IAIR,SAAS;CAUV","file":"toast.d.ts","sourcesContent":["import { SuperComponent, wxComponent } from '../common/src/index';\nimport { TdToastProps } from './type';\nimport config from '../common/config';\nimport Props from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-toast`;\n\n@wxComponent()\nexport default class Toast extends SuperComponent {\n  externalClasses = ['t-class'];\n\n  options = {\n    multipleSlots: true, // 在组件定义时的选项中启用多slot支持\n  };\n\n  hideTimer: number | null = null;\n\n  removeTimer: number | null = null;\n\n  typeMapIcon: Record<string, string> = {\n    loading: 'loading',\n    success: 'check-circle',\n    fail: 'error-circle',\n  };\n\n  data = {\n    inserted: false,\n    show: false,\n    classPrefix: name,\n    typeMapIcon: '',\n  };\n\n  properties = Props;\n\n  show(options: TdToastProps) {\n    if (this.hideTimer) clearTimeout(this.hideTimer);\n    if (this.removeTimer) clearTimeout(this.removeTimer);\n    const typeMapIcon =\n      Object.keys(this.typeMapIcon).indexOf(options?.theme as any) !== -1\n        ? this.typeMapIcon[options?.theme as any]\n        : '';\n\n    const data = {\n      ...options,\n      show: true,\n      typeMapIcon,\n      inserted: true,\n    };\n    const { duration } = data;\n    this.setData(data);\n    this.hideTimer = setTimeout(() => {\n      this.clear();\n    }, duration as any);\n  }\n\n  clear() {\n    this.setData({ show: false });\n    this.removeTimer = setTimeout(() => {\n      this.setData({\n        inserted: false,\n      });\n    }, 300);\n  }\n\n  detached() {\n    this.destroyed();\n  }\n\n  destroyed() {\n    if (this.removeTimer) {\n      clearTimeout(this.removeTimer);\n      this.removeTimer = null;\n    }\n    if (this.hideTimer) {\n      clearTimeout(this.hideTimer);\n      this.hideTimer = null;\n    }\n  }\n}\n"]}