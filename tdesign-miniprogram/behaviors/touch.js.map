{"version":3,"sources":["../src/behaviors/touch.ts"],"names":[],"mappings":"AAAA,MAAM,WAAW,GAAG,EAAE,CAAC;AACvB,MAAM,YAAY,GAAG,CAAC,CAAS,EAAE,CAAS,EAAE,EAAE;IAC5C,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,WAAW,EAAE;QAC5B,OAAO,YAAY,CAAC;KACrB;IACD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,WAAW,EAAE;QAC5B,OAAO,UAAU,CAAC;KACnB;IACD,OAAO,EAAE,CAAC;AACZ,CAAC,CAAC;AAEF,eAAe,QAAQ,CAAC;IACtB,OAAO,EAAE;QACP,gBAAgB;YACd,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;YACpB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YAChB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YAChB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;YACjB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QACnB,CAAC;QACD,UAAU,CAAC,KAAU;YACnB,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC;YAC9B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC;YAC5B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC;QAC9B,CAAC;QACD,SAAS,CAAC,KAAU;YAClB,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC;YAC9B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;YAC1C,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;YAC1C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACrC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACrC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9E,CAAC;KACF;CACF,CAAC,CAAC","file":"touch.js","sourcesContent":["const MinDistance = 10;\nconst getDirection = (x: number, y: number) => {\n  if (x > y && x > MinDistance) {\n    return 'horizontal';\n  }\n  if (y > x && y > MinDistance) {\n    return 'vertical';\n  }\n  return '';\n};\n\nexport default Behavior({\n  methods: {\n    resetTouchStatus() {\n      this.direction = '';\n      this.deltaX = 0;\n      this.deltaY = 0;\n      this.offsetX = 0;\n      this.offsetY = 0;\n    },\n    touchStart(event: any) {\n      this.resetTouchStatus();\n      const [touch] = event.touches;\n      this.startX = touch.clientX;\n      this.startY = touch.clientY;\n    },\n    touchMove(event: any) {\n      const [touch] = event.touches;\n      this.deltaX = touch.clientX - this.startX;\n      this.deltaY = touch.clientY - this.startY;\n      this.offsetX = Math.abs(this.deltaX);\n      this.offsetY = Math.abs(this.deltaY);\n      this.direction = this.direction || getDirection(this.offsetX, this.offsetY);\n    },\n  },\n});\n"]}