{"version":3,"sources":["../src/grid/grid-item.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAyB,MAAM,qBAAqB,CAAC;AAc5E,MAAM,CAAC,OAAO,OAAO,QAAS,SAAQ,cAAc;IAClD,eAAe,WAAuE;IAEtF,OAAO;;MAEL;IAEF,SAAS;;;yBAGQ,QAAQ,UAAU,2BAA2B,CAAC,eAAe;;MAK5E;IAEF,UAAU,mCAAS;IAEnB,IAAI;;;;;;;MAOF;IAEF,WAAW;IAsBX,aAAa;IAMb,eAAe;IAOf,cAAc;IAUd,OAAO,CAAC,CAAC,KAAA;IAMT,QAAQ;CAQT","file":"grid-item.d.ts","sourcesContent":["import { SuperComponent, wxComponent, isObject } from '../common/src/index';\nimport config from '../common/config';\nimport props from './grid-item-props';\n\nconst { prefix } = config;\nconst name = `${prefix}-grid-item`;\nenum LinkTypes {\n  'redirect-to' = 'redirectTo',\n  'switch-tab' = 'switchTab',\n  'relaunch' = 'reLaunch',\n  'navigate-to' = 'navigateTo',\n}\n\n@wxComponent()\nexport default class GridItem extends SuperComponent {\n  externalClasses = ['t-class', 't-class-image', 't-class-text', 't-class-description'];\n\n  options = {\n    multipleSlots: true,\n  };\n\n  relations = {\n    './grid': {\n      type: 'ancestor' as 'ancestor',\n      linked(this: GridItem, target: WechatMiniprogram.Component.TrivialInstance) {\n        this.parent = target;\n        this.updateStyle();\n      },\n    },\n  };\n\n  properties = props;\n\n  data = {\n    classPrefix: name,\n    gridItemStyle: '',\n    gridItemWrapperStyle: '',\n    gridItemContentStyle: '',\n    align: 'center',\n    layout: 'vertical',\n  };\n\n  updateStyle() {\n    const { hover, align } = this.parent.properties;\n    const gridItemStyles = [];\n    const gridItemWrapperStyles = [];\n    const gridItemContentStyles = [];\n    const widthStyle = this.getWidthStyle();\n    const paddingStyle = this.getPaddingStyle();\n    const borderStyle = this.getBorderStyle();\n    widthStyle && gridItemStyles.push(widthStyle);\n    paddingStyle && gridItemWrapperStyles.push(paddingStyle);\n    borderStyle && gridItemContentStyles.push(borderStyle);\n    this.setData({\n      gridItemStyle: gridItemStyles.join(';'),\n      gridItemWrapperStyle: gridItemWrapperStyles.join(';'),\n      gridItemContentStyle: gridItemContentStyles.join(';'),\n      hover,\n      layout: this.properties.layout,\n      align: align,\n    });\n  }\n\n  // 判断应该加在gridItem上的宽度\n  getWidthStyle() {\n    const { column = 4 } = this.parent.properties;\n    return `width:${(1 / column) * 100}%`;\n  }\n\n  // 获取应该加在gridWrap上的padding\n  getPaddingStyle() {\n    const { gutter } = this.parent.properties;\n    if (gutter) return `padding-left:${gutter}rpx;padding-top:${gutter}rpx`;\n    return '';\n  }\n\n  // 判断border在grid-item-content上的css属性\n  getBorderStyle() {\n    const { gutter } = this.parent.properties;\n    let { border } = this.parent.properties;\n    if (!border) return ''; // 如果border的值没传或者是border的值为false\n    if (!isObject(border)) border = {} as any;\n    const { color = '#266FE8', width = 2, style = 'solid' } = border as any;\n    if (gutter) return `border:${width}rpx ${style} ${color}`;\n    return `border-top:${width}rpx ${style} ${color};border-left:${width}rpx ${style} ${color}`;\n  }\n\n  onClick(e) {\n    const { item } = e.currentTarget.dataset;\n    this.triggerEvent('click', item);\n    this.jumpLink();\n  }\n\n  jumpLink() {\n    const { url, jumpType } = this.properties;\n    if (url && jumpType) {\n      if (LinkTypes[jumpType as any]) {\n        wx[LinkTypes[jumpType as any]]({ url });\n      }\n    }\n  }\n}\n"]}