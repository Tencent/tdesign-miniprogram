{"version":3,"sources":["../src/common/src/instantiationDecorator.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAsBlD;;;;GAIG;AACH,eAAO,MAAM,WAAW,YAAiC,OAAO,MAAM,EAAE,GAAG,CAAC,wBAiF3E,CAAC;AAEF;;;GAGG;AACH,eAAO,MAAM,WAAW,sBACQ,UAAU,cAAc,KAAG,IAiB1D,CAAC","file":"instantiationDecorator.d.ts","sourcesContent":["import { isPlainObject, toObject } from './flatTool';\n\nimport { SuperComponent } from './superComponent';\n\n// 将 on 开头的生命周期函数转变成非 on 开头的\nconst RawLifeCycles = ['Created', 'Attached', 'Ready', 'Moved', 'Detached', 'Error'];\nconst NativeLifeCycles = RawLifeCycles.map((k) => k.toLowerCase());\n\nconst ComponentNativeProps = [\n  'properties',\n  'data',\n  'observers',\n  'methods',\n  'behaviors',\n  // life times properties\n  ...NativeLifeCycles,\n  'relations',\n  'externalClasses',\n  'options',\n  'lifetimes',\n  'pageLifeTimes',\n  'definitionFilter',\n];\n\n/**\n * 将一个普通的 options 对象转化处理为 Component 支持的对象\n * 在这里需要对一些方法进行操作\n * @param options {}\n */\nexport const toComponent = function toComponent(options: Record<string, any>) {\n  // 处理 properties 属性\n  if (options.properties) {\n    Object.keys(options.properties).forEach((k) => {\n      let opt = options.properties[k];\n      // 如何不是 Object 类型，则默认指定 type = options.properties[k]；\n      if (!isPlainObject(opt)) {\n        opt = { type: opt };\n      }\n      options.properties[k] = opt;\n    });\n  }\n\n  // 处理自定义的方法和生命周期函数\n  if (!options.methods) options.methods = {};\n\n  // 使用 lifetimes 处理生命周期函数\n  if (!options.lifetimes) options.lifetimes = {};\n\n  const inits: { [key: string]: PropertyDescriptor } = {};\n\n  Object.getOwnPropertyNames(options).forEach((k) => {\n    const desc = Object.getOwnPropertyDescriptor(options, k);\n    if (!desc) return;\n    if (NativeLifeCycles.indexOf(k) < 0 && typeof desc.value === 'function') {\n      // 非生命周期函数挂载到 methods 对象上面\n      Object.defineProperty(options.methods, k, desc);\n      delete options[k];\n    } else if (ComponentNativeProps.indexOf(k) < 0) {\n      // 非函数，也非组件内部属性\n      // 由于小程序组件会忽略不能识别的字段，需要这里需要把这些字段配置在组件 created 的时候赋值\n      inits[k] = desc;\n    } else if (NativeLifeCycles.indexOf(k) >= 0) {\n      options.lifetimes[k] = options[k];\n    }\n  });\n\n  if (Object.keys(inits).length) {\n    const oldCreated = options.lifetimes.created;\n    const oldAttached = options.lifetimes.attached;\n    const { controlledProps = [] } = options;\n\n    options.lifetimes.created = function (...args) {\n      Object.defineProperties(this, inits);\n      if (oldCreated) oldCreated.apply(this, args);\n    };\n\n    options.lifetimes.attached = function (...args) {\n      if (oldAttached) oldAttached.apply(this, args);\n\n      controlledProps.forEach(({ key }) => {\n        const defaultKey = `default${key.replace(/^(\\w)/, (m, m1) => m1.toUpperCase())}`;\n        const props = this.properties;\n\n        if (props[defaultKey] != null) {\n          // props[defaultKey] 的默认值需设置成 undefined\n          this.setData({\n            [key]: props[defaultKey],\n          });\n        }\n      });\n    };\n\n    options.methods._trigger = function (evtName, detail, opts) {\n      const target = controlledProps.find((item) => item.event == evtName);\n      if (target) {\n        const { key } = target;\n        const props = this.properties;\n        const defaultKey = `default${key.replace(/^(\\w)/, (m, m1) => m1.toUpperCase())}`;\n\n        if (props[defaultKey] != null) {\n          this.setData({\n            [key]: detail[key],\n          });\n        }\n      }\n      this.triggerEvent(evtName, detail, opts);\n    };\n  }\n\n  return options;\n};\n\n/**\n * 将一个继承了 BaseComponent 的类转化成 小程序 Component 的调用\n * 根据最新的微信 d.ts 描述文件，Component 在实例化的时候，会忽略不支持的自定义属性\n */\nexport const wxComponent = function wxComponent() {\n  return function (constructor: new () => SuperComponent): void {\n    class WxComponent extends constructor {\n      // 暂时移除了冗余的代码，后续补充\n    }\n\n    const current = new WxComponent();\n\n    // 所有组件默认都开启css作用域\n    // 写到这里是为了防止组件设置 options 时无意覆盖掉了 addGlobalClass\n    current.options = current.options || {};\n    if (current.options.addGlobalClass === undefined) {\n      current.options.addGlobalClass = true;\n    }\n\n    const obj = toComponent(toObject(current));\n    Component(obj);\n  };\n};\n"]}